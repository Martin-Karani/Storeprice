const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const mongodb = require("mongodb");
const { UserInputError } = require("apollo-server");

const server = require("../../server");
const { SECRET_KEY } = require("../../config");
const isAuth = require("../../utils/isAuth");

const { validateStoreInput } = require("../../utils/validators");

function generateToken(store) {
	return jwt.sign(
		{
			_id: store._id,
			email: store.email,
			isStore: store.isStore,
			storeID: store.storeId,
		},
		SECRET_KEY,
		{ expiresIn: "1h" }
	);
}

async function findProducts(productIds) {
	const products = await server
		.getDb()
		.db()
		.collection("products")
		.find({ _id: { $in: productIds } })
		.toArray();

	return products.map((product) => {
		return { ...product, _id: product._id.toString() };
	});
}

module.exports = {
	Query: {
		getStores: async () => {
			try {
				const stores = await server
					.getDb()
					.db()
					.collection("stores")
					.find()
					.toArray();
				return stores.map((store) => {
					return {
						...store,
						_id: store._id.toString(),
						password: null,
					};
				});
			} catch (err) {
				throw err;
			}
		},
		getStore: async (_, { storeId }) => {
			try {
				console.log(storeId);
				const store = await server
					.getDb()
					.db()
					.collection("stores")
					.findOne({ _id: mongodb.ObjectId(storeId) });

				return {
					...store,
					_id: store._id.toString(),
					products: findProducts.bind(this, store.products),
				};
			} catch (err) {
				throw err;
			}
		},
	},
	Mutation: {
		createStore: async (_, { memberInput, storeInput }) => {
			try {
				const { valid, errors } = validateStoreInput(
					memberInput.userName,
					memberInput.email,
					memberInput.password,
					memberInput.confirmPassword,
					storeInput.phoneNo,
					storeInput.location
				);
				if (!valid) {
					throw new UserInputError("errors", { errors });
				}

				const memberExists = await server
					.getDb()
					.db()
					.collection("members")
					.findOne({
						$or: [
							{ email: memberInput.email },
							{ userName: memberInput.userName },
						],
					});

				if (memberExists) {
					throw new UserInputError("Store name or Email is taken ", {
						errors: {
							storeName: "this store name or Email is taken",
						},
					});
				}

				const store = {
					phoneNo: storeInput.phoneNo,
					location: storeInput.location,
					products: [],
					storeImg: [],
				};

				const { ops } = await server
					.getDb()
					.db()
					.collection("stores")
					.insertOne(store);

				hashedPassword = await bcrypt.hash(memberInput.password, 12);
				const member = {
					email: memberInput.email,
					password: hashedPassword,
					userName: memberInput.userName,
					isStore: true,
					storeId: ops[0]._id,
				};

				const createdMember = await server
					.getDb()
					.db()
					.collection("members")
					.insertOne(member);

				const token = generateToken(createdMember.ops[0]);

				return {
					...createdMember.ops[0],
					password: null,
					token,
				};
			} catch (err) {
				throw err;
			}
		},
		editStore: async (_, { storeInput, storeId }, context) => {
			try {
				const member = isAuth(context);
				if (!member) {
					throw new UserInputError("member not authorized");
				}

				const store = JSON.parse(JSON.stringify(storeInput));

				const isUpdated = await server
					.getDb()
					.db()
					.collection("stores")
					.updateOne({ _id: mongodb.ObjectId(storeId) }, { $set: store });

				if (isUpdated.modifiedCount > 0) {
					const updatedStore = await server
						.getDb()
						.db()
						.collection("stores")
						.findOne({ _id: mongodb.ObjectId(storeId) });

					return {
						...updatedStore,
						_id: updatedStore._id.toString(),
					};
				} else {
					throw new Error("not updated");
				}
			} catch (err) {
				throw err;
			}
		},
	},
};
